{
	"OpenTofu Provider": {
  "prefix": "_new user",
  "body": [
    "package provider",
    "",
    "import (",
    "  \"context\"",
    "  \"fmt\"",
    "  \"terraform-provider-linuxhost/linuxhost_client\"",
    "  models \"terraform-provider-linuxhost/models\"",
    "",
    "  \"github.com/hashicorp/terraform-plugin-framework/path\"",
    "  \"github.com/hashicorp/terraform-plugin-framework/resource\"",
    "  \"github.com/hashicorp/terraform-plugin-framework/resource/schema\"",
    "  \"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier\"",
    "  \"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier\"",
    "  \"github.com/hashicorp/terraform-plugin-framework/types\"",
    "  \"github.com/hashicorp/terraform-plugin-log/tflog\"",
    ")",
    "",
    "var _ resource.ResourceWithConfigure = &$1Resource{}",
    "",
    "func New$1Resource() resource.Resource {",
    "  return &$1Resource{}",
    "}",
    "",
    "type $1Resource struct {",
    "  hostData *linuxhost_client.HostData",
    "}",
    "",
    "func (r *$1Resource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {",
    "  resp.TypeName = req.ProviderTypeName + \"_$2\"",
    "}",
    "",
    "func (r *$1Resource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {",
    "  resp.Schema = schema.Schema{",
    "    MarkdownDescription: \"$3\",",
    "    Attributes: map[string]schema.Attribute{",
    "    },",
    "    Version: 1,",
    "  }",
    "}",
    "",
    "func (r *$1Resource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {",
    "  r.hostData, _ = req.ProviderData.(*linuxhost_client.HostData)",
    "}",
    "",
    "func (r *$1Resource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {",
    "  var data models.$1Model",
    "  resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)",
    "  if resp.Diagnostics.HasError() {",
    "    return",
    "  }",
    "",
    "  resp.Diagnostics.AddError(\"Not implemented\", \"Create is not implemented.\")",
    "}",
    "",
    "func (r *$1Resource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {",
    "  if r.hostData == nil {",
    "    resp.Diagnostics.AddError(\"Missing client\", \"\")",
    "    return",
    "  }",
    "  var data models.$1Model",
    "  resp.Diagnostics.Append(req.State.Get(ctx, &data)...)",
    "",
    "  //resp.State.RemoveResource(ctx)",
    "",
    "  if resp.Diagnostics.HasError() {",
    "    return",
    "  }",
    "}",
    "",
    "func (r *$1Resource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {",
    "  var data models.$1Model",
    "  // Read Terraform plan data into the model",
    "  resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)",
    "  if resp.Diagnostics.HasError() {",
    "    return",
    "  }",
    "",
    "  resp.Diagnostics.AddError(\"Not implemented\", \"Update is not implemented.\")",
    "  // return",
    "",
    "  // Save updated data into Terraform state",
    "  // resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)",
    "}",
    "",
    "func (r *$1Resource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {",
    "  var data models.$1Model",
    "  // Read Terraform prior state data into the model",
    "  resp.Diagnostics.Append(req.State.Get(ctx, &data)...)",
    "",
    "",
    "  resp.Diagnostics.AddError(\"Not implemented\", \"Delete is not implemented.\")",
    "  if resp.Diagnostics.HasError() {",
    "    return",
    "  }",
    "}",
    "func (r *$1Resource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {",
    "  resource.ImportStatePassthroughID(ctx, path.Root(\"id\"), req, resp)",
    "}",
    ""
  ],
  "description": "OpenTofu Provider"
}
}